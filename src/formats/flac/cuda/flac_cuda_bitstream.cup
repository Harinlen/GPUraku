/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FLAC_CUDA_BITSTREAM
#define FLAC_CUDA_BITSTREAM

typedef struct CudaBitStream
{
    uchar *data;
    gruint8 cache, fcache;
    gruint8 bitpos;
    gruint8 temp8, temp8p, temp8q, temp8r;
} CudaBitStream;

#define BitReadBit(stream, bit) \
    if(stream.bitpos==7) \
    {\
        bit=stream.cache > 0;\
        stream.cache=*(++stream.data);\
        stream.bitpos=0;\
    }\
    else\
    {\
        bit=(stream.cache & 0x80)>0;\
        stream.cache<<=1;\
        ++stream.bitpos;\
    }

#define BitReadRice0(stream, rice) \
    rice=0; \
    while(!(stream.cache & 0x80)) \
    {\
        if(stream.bitpos==7)\
        {\
            stream.cache=*(++stream.data);\
            stream.bitpos=0;\
        }\
        else\
        {\
            stream.cache<<=1;\
            ++stream.bitpos;\
        }\
        ++rice;\
    }\
    if(stream.bitpos==7)\
    {\
        stream.cache=*(++stream.data);\
        stream.bitpos=0;\
    }\
    else\
    {\
        stream.cache<<=1;\
        ++stream.bitpos;\
    }
    
#define BitReadDBit(stream, byte) \
    if(stream.bitpos<6) \
    { \
        byte=(stream.cache & 0xC0)>>6; \
        stream.bitpos+=2; \
        stream.cache<<=2; \
    } \
    else \
    { \
        stream.fcache=*(++stream.data); \
        stream.bitpos-=6; \
        byte=(stream.cache>>6) | ((stream.fcache & (stream.bitpos<<7))>>7);\
        stream.cache=stream.fcache<<stream.bitpos; \
    }

#define BitReadTBit(stream, byte) \
    if(stream.bitpos<5) \
    { \
        byte=(stream.cache & 0xE0)>>5; \
        stream.bitpos+=3; \
        stream.cache<<=3; \
    } \
    else \
    { \
        stream.fcache=*(++stream.data); \
        byte=(stream.cache>>5) | ((stream.fcache & \
                        (~((1<<(13-stream.bitpos))-1))) >> (13-stream.bitpos));\
        stream.bitpos-=5; \
        stream.cache=stream.fcache<<stream.bitpos;\
    }
    
#define BitReadHByte(stream, byte) \
    if(stream.bitpos<4) \
    { \
        byte=(stream.cache & 0xF0)>>4; \
        stream.bitpos+=4;\
        stream.cache<<=4;\
    } \
    else \
    { \
        stream.fcache=*(++stream.data);\
        byte=(stream.cache >> 4) | ((stream.fcache & \
                        (~((1<<(12-stream.bitpos))-1))) >> (12-stream.bitpos));\
        stream.bitpos-=4; \
        stream.cache=stream.fcache<<stream.bitpos;\
    }

#define BitReadPBit(stream, byte) \
    if(stream.bitpos<3) \
    {\
        byte=(stream.cache & 0xF8)>>3;\
        stream.bitpos+=5;\
        stream.cache<<=5;\
    }\
    else\
    {\
        stream.fcache=*(++stream.data);\
        byte=(stream.cache>>3) | ((stream.fcache & \
                        (~((1<<(11-stream.bitpos))-1))) >> (11-stream.bitpos));\
        stream.bitpos-=3;\
        stream.cache=stream.fcache<<stream.bitpos;\
    }

#define BitReadHsBit(stream, byte) \
    if(stream.bitpos<2) \
    {\
        byte=(stream.cache & 0xFC)>>2;\
        stream.bitpos+=6;\
        stream.cache<<=6;\
    }\
    else\
    {\
        stream.fcache=*(++stream.data);\
        byte=(stream.cache>>2) | ((stream.fcache & \
                        (~((1<<(10-stream.bitpos))-1))) >> (10-stream.bitpos));\
        stream.bitpos-=2;\
        stream.cache=stream.fcache<<stream.bitpos;\
    }
    
#define BitReadSeBit(stream, byte) \
    if(stream.bitpos==0) \
    { \
        byte=(stream.cache & 0xFE)>>1; \
        stream.bitpos=7; \
        stream.cache<<=7; \
    } \
    else \
    { \
        stream.fcache=*(++stream.data); \
        byte=(stream.cache>>1) | ((stream.fcache & \
                        (~((1<<(9-stream.bitpos))-1))) >> (9-stream.bitpos)); \
        stream.bitpos-=1; \
        stream.cache=stream.fcache<<stream.bitpos; \
    }


#define BitReadByte(stream, byte) \
    if(stream.bitpos==0) \
    { \
        byte=stream.cache; \
        stream.cache=*(++stream.data);\
    } \
    else \
    { \
        stream.fcache=*(++stream.data); \
        byte=stream.cache | ((stream.fcache & \
                       (~((1<<(8-stream.bitpos))-1)))>>(8-stream.bitpos)); \
        stream.cache=stream.fcache<<stream.bitpos; \
    }

typedef gruint32 (*cudaUIntFunc)(CudaBitStream &stream);

__device__ __forceinline__ gruint32 GRReadUInt0(CudaBitStream &stream)
{
    GR_UNUSED(stream);
    return 0;
}

__device__ __forceinline__ gruint32 GRReadUInt1(CudaBitStream &stream)
{
    BitReadBit(stream, stream.temp8);
    return (gruint32) stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt2(CudaBitStream &stream)
{
    BitReadDBit(stream, stream.temp8);
    return (gruint32) stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt3(CudaBitStream &stream)
{
    BitReadTBit(stream, stream.temp8);
    return (gruint32) stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt4(CudaBitStream &stream)
{
    BitReadHByte(stream, stream.temp8);
    return (gruint32)stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt5(CudaBitStream &stream)
{
    BitReadPBit(stream, stream.temp8);
    return (gruint32)stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt6(CudaBitStream &stream)
{
    BitReadHsBit(stream, stream.temp8);
    return (gruint32)stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt7(CudaBitStream &stream)
{
    BitReadSeBit(stream, stream.temp8);
    return (gruint32)stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt8(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    return (gruint32)stream.temp8;
}

__device__ __forceinline__ gruint32 GRReadUInt9(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<1) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt10(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadDBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<2) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt11(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadTBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<3) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt12(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadHByte(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<4) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt13(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadPBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<5) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt14(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadHsBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<6) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt15(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadSeBit(stream, stream.temp8p);
    return (gruint32)(stream.temp8<<7) | stream.temp8p;
}

__device__ __forceinline__ gruint32 GRReadUInt16(CudaBitStream &stream)
{
    stream.temp8=stream.cache;
    stream.data+=2;
    if(stream.bitpos==0)
    {
        stream.cache=*stream.data;
        return (stream.temp8<<8 | (*(stream.data-1)));
    }
    stream.temp8p=*stream.data;
    stream.cache=stream.temp8p << stream.bitpos;
    return ((gruint32)stream.temp8 << 8) | 
                ((*(stream.data-1)) << stream.bitpos) | 
                (((stream.temp8p) & 
                    (~((1<<(8-stream.bitpos))-1)))>>(8-stream.bitpos));
}

__device__ __forceinline__ gruint32 GRReadUInt17(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadBit(stream, stream.temp8q);
    return (gruint32)(stream.temp8<<9) | (gruint32)(stream.temp8p<<1) |
            (stream.temp8q);
}

__device__ __forceinline__ gruint32 GRReadUInt18(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadDBit(stream, stream.temp8q);
    return (gruint32)(stream.temp8<<10) | (gruint32)(stream.temp8p<<2)
            | stream.temp8q;
}

__device__ __forceinline__ gruint32 GRReadUInt19(CudaBitStream &stream)
{
    return GRReadUInt18(stream)<<1 | GRReadUInt1(stream);
}

__device__ __forceinline__ gruint32 GRReadUInt20(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadHByte(stream, stream.temp8q);
    return (gruint32)(stream.temp8<<12) | (gruint32)(stream.temp8p<<4)
            | (stream.temp8q);
}

__device__ __forceinline__ gruint32 GRReadUInt21(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadHByte(stream, stream.temp8q);
    BitReadBit(stream, stream.temp8r);
    return (gruint32)(stream.temp8<<13) | (gruint32)(stream.temp8p<<5)
            | (stream.temp8q<<1) | stream.temp8r;
}

__device__ __forceinline__ gruint32 GRReadUInt22(CudaBitStream &stream)
{
    return GRReadUInt21(stream)<<1 | GRReadUInt1(stream);
}

__device__ __forceinline__ gruint32 GRReadUInt23(CudaBitStream &stream)
{
    return GRReadUInt21(stream)<<2 | GRReadUInt2(stream);
}

__device__ __forceinline__ gruint32 GRReadUInt24(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadByte(stream, stream.temp8q);
    return (gruint32)(stream.temp8<<16) | (gruint32)(stream.temp8p<<8) |
            stream.temp8q;
}

__device__ __forceinline__ gruint32 GRReadUInt25(CudaBitStream &stream)
{
    BitReadByte(stream, stream.temp8);
    BitReadByte(stream, stream.temp8p);
    BitReadByte(stream, stream.temp8q);
    BitReadBit(stream, stream.temp8r);
    return (gruint32)(stream.temp8<<17) | (gruint32)(stream.temp8p<<9) |
            (stream.temp8q<<1) | stream.temp8r;
}

#endif // FLAC_CUDA_BITSTREAM