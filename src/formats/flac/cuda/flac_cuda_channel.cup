/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FLAC_CUDA_CHANNEL
#define FLAC_CUDA_CHANNEL

__global__ void flac_cuda_restore_signal(
    CudaFrameDecode *decodeData, 
    CudaSubFrameType *subFrame,
    gruint32 frameCount)
{
    //Calculate the core index.
    int threadId=blockDim.x * blockIdx.x + threadIdx.x;
    if(threadId >= frameCount)
    {
        return;
    }
    //Get the sub frame type.
    CudaSubFrameType subFrameType=subFrame[threadId];
    gruint32 blockSize=decodeData[threadId].blockSize;
    gruint32 i, j;
    //Check sub frame type.
    if(subFrameType.type==FLAC_SUBFRAME_VERBATIM)
    {
        //No need to decode.
        return;
    }
    if(subFrameType.type==FLAC_SUBFRAME_CONSTANT)
    {
        grint32 cache=subFrameType.pcm[0];
        //Copy the first data to the rest of the samples.
        for(i=1; i<blockSize; ++i)
        {
            subFrameType.pcm[i]=cache;
        }
        return;
    }
    if(subFrameType.type==FLAC_SUBFRAME_FIXED)
    {
        //Check order, apply different algorithm.
        if(subFrameType.order==0)
        {
            return;
        }
        //Define the three level progression.
        grint32 cache0, cache1, cache2;
        if(subFrameType.order==1)
        {
            //Apply the algorithm.
            i=1;
            while(i<blockSize)
            {
                //Calculate the result.
                subFrameType.pcm[i]+=subFrameType.pcm[i-1];
                ++i;
            }
        }
        else if(subFrameType.order==2)
        {
            cache0=subFrameType.pcm[1]-subFrameType.pcm[0];
            //Apply the algorithm.
            i=2;
            while(i<blockSize)
            {
                //Calculate the result.
                subFrameType.pcm[i]=(cache0+=subFrameType.pcm[i])+
                                    subFrameType.pcm[i-1];
                ++i;
            }
        }
        else if(subFrameType.order==3)
        {
            //Apply the algorithm.
            cache0=subFrameType.pcm[2]-(subFrameType.pcm[1]<<1)+
                        subFrameType.pcm[0];
            cache1=subFrameType.pcm[2]-subFrameType.pcm[1];
            i=3;
            while(i<blockSize)
            {
                subFrameType.pcm[i]=(cache1+=
                                    (cache0+=subFrameType.pcm[i]))+
                                    subFrameType.pcm[i-1];
                ++i;
            }
        }
        else if(subFrameType.order==4)
        {
            grint32 temp0=subFrameType.pcm[0], 
                    temp1=subFrameType.pcm[1], 
                    temp2=subFrameType.pcm[2], 
                    temp3=subFrameType.pcm[3];
            //Apply the algorithm.
            cache0=temp3-(temp2<<1)-
                        temp2+(temp1<<1)+
                        temp1-temp0;
            cache1=temp3-(temp2<<1)+
                        temp1;
            cache2=temp3-temp2;
            i=4;
            while(i<blockSize)
            {
                subFrameType.pcm[i]=(cache2+=
                                    (cache1+=
                                    (cache0+=subFrameType.pcm[i])))+
                                    subFrameType.pcm[i-1];
                ++i;
            }
        } 
        return;
    }
    //LPC.
    grint32 sum, cacheBuf[33];
    for(i=0; i<subFrameType.order; ++i)
    {
        cacheBuf[i]=subFrameType.pcm[i];
    }
    //Loop for all the sample size.
    for(i=subFrameType.order; i<blockSize; ++i)
    {
        sum=0;
        //Calculate the difference.
        for(j=0; j<subFrameType.order; ++j)
        {
            sum+=subFrameType.coefs[j]*cacheBuf[j];
            cacheBuf[j]=cacheBuf[j+1];
        }
        //Apply the different, set the value to samples.
        subFrameType.pcm[i]=
            (cacheBuf[subFrameType.order-1]=
                subFrameType.pcm[i]+(sum>>subFrameType.shift));
    }
}

#if __CUDA_ARCH__ >= 350
    // For Eric's GTX1080
    #include "flac_cuda_channel_pascal.cup"
#else
    // For my local GTX680M
    #include "flac_cuda_channel_30.cup"
#endif

#endif // FLAC_CUDA_CHANNEL
