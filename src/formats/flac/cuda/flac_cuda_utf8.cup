/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FLAC_CUDA_UTF8
#define FLAC_CUDA_UTF8

/*
 * This file contains the function that calculate the UTF-8 result.
 */

// This type describes one of the following function.
typedef gruint64 (*cudaUtfFunc)(uchar *);

__device__ __inline__ gruint64 cudaUtfL0(uchar *pos)
{
    return pos[0];
}

__device__ __inline__ gruint64 cudaUtfL1(uchar *pos)
{
    return (((pos[0] & 0x1F) << 6)  | (pos[1] & 0x3F));
}

__device__ __inline__ gruint64 cudaUtfL2(uchar *pos)
{
    return (((pos[0] & 0x0F) << 12) | ((pos[1] & 0x3F) << 6) |
             (pos[2] & 0x3F));
}

__device__ __inline__ gruint64 cudaUtfL3(uchar *pos)
{
    return  (((pos[0] & 0x07) << 18) | ((pos[1] & 0x3F) << 12) |
             ((pos[2] & 0x3F) << 6 ) | (pos[3] & 0x3F));
}

__device__ __inline__ gruint64 cudaUtfL4(uchar *pos)
{
    return (((gruint64)(pos[0] & 0x03) << 24) | ((pos[1] & 0x3F) << 18) |
            ((pos[2] & 0x3F) << 12) | ((pos[3] & 0x3F) << 6 ) |
             (pos[4] & 0x3F));
}

__device__ __inline__ gruint64 cudaUtfL5(uchar *pos)
{
    return (((gruint64)(pos[0] & 0x01) << 30) | ((pos[1] & 0x3F) << 24) |
            ((pos[2] & 0x3F) << 18) | ((pos[3] & 0x3F) << 12) |
            ((pos[4] & 0x3F) << 6 ) |  (pos[5] & 0x3F));
}

__device__ __inline__ gruint64 cudaUtfL6(uchar *pos)
{
    return (((gruint64)(pos[1] & 0x3F) << 30) | ((pos[2] & 0x3F) << 24) |
              ((pos[3] & 0x3F) << 18) | ((pos[4] & 0x3F) << 12) |
              ((pos[5] & 0x3F) << 6 ) |  (pos[6] & 0x3F));
}

#endif // FLAC_CUDA_UTF8