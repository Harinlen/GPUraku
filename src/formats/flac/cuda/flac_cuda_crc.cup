/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FLAC_CUDA_CRC
#define FLAC_CUDA_CRC

/*
 * This file contains the function that relates to the FLAC CRC calculation.
 */

// This type describes one of the following function.
typedef gruint8 (*cudaCrcFunc)(const uchar *, uchar *);

__device__ __inline__ gruint8 cudaCrcL5(const uchar *table, uchar *data)
{
    return table[table[table[table[table[
        data[0]]^data[1]]^data[2]]^data[3]]^data[4]];
}

__device__ __inline__ gruint8 cudaCrcL6(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[
        data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]];
}

__device__ __inline__ gruint8 cudaCrcL7(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[table[
        data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]]^data[6]];
}

__device__ __inline__ gruint8 cudaCrcL8(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[table[table[
        data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]]^data[6]]^data[7]];
}

__device__ __inline__ gruint8 cudaCrcL9(const uchar *table, uchar *data)
{
    return table[table[table[table[table[
        table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]
        ]^data[5]]^data[6]]^data[7]]^data[8]];
}

__device__ __inline__ gruint8 cudaCrcL10(const uchar *table, uchar *data)
{
    return table[table[table[table[table[
        table[table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]
        ]^data[5]]^data[6]]^data[7]]^data[8]]^data[9]];
}

__device__ __inline__ gruint8 cudaCrcL11(const uchar *table, uchar *data)
{
    return table[table[table[table[table[
        table[table[table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]
        ]^data[5]]^data[6]]^data[7]]^data[8]]^data[9]]^data[10]];
}

__device__ __inline__ gruint8 cudaCrcL12(const uchar *table, uchar *data)
{
    return table[table[table[table[table[
        table[table[table[table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]
        ]^data[5]]^data[6]]^data[7]]^data[8]]^data[9]]^data[10]]^data[11]];
}

__device__ __inline__ gruint8 cudaCrcL13(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[table[table[table[
        table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]]^data[6]
        ]^data[7]]^data[8]]^data[9]]^data[10]]^data[11]]^data[12]];
}

__device__ __inline__ gruint8 cudaCrcL14(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[table[table[table[
        table[table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]]^data[6]
        ]^data[7]]^data[8]]^data[9]]^data[10]]^data[11]]^data[12]]^data[13]];
}

__device__ __inline__ gruint8 cudaCrcL15(const uchar *table, uchar *data)
{
    return table[table[table[table[table[table[table[table[table[table[table[
        table[table[table[table[
            data[0]]^data[1]]^data[2]]^data[3]]^data[4]]^data[5]]^data[6]
        ]^data[7]]^data[8]]^data[9]]^data[10]]^data[11]]^data[12]]^data[13]
        ]^data[14]];
}

#endif // FLAC_CUDA_CRC
