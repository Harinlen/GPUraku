/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FLAC_CUDA_FRAME
#define FLAC_CUDA_FRAME

/*
 * This file contains the function that related to the FLAC frames.
 * Depends: 
 *   - flac_cuda_utf8.cup
 *   - flac_cuda_crc.cup
 */

__global__ void flac_cuda_find_frames(
    uchar * __restrict__ data,
    size_t dataSize, 
    size_t *frameSizes,
    CudaFrameDecode *decodeData,
    size_t lastPos,
    size_t searchSize,
    gruint32 threadCount,
    gruint32 frameCount,
    gruint32 streamSampleRate,
    gruint8 streamChannels,
    gruint8 streamBps)
{
    __shared__ uchar headerCache[CudaThreadBlockSize<<4];
    //Calculate the core index.
    register int threadId=blockDim.x * blockIdx.x + threadIdx.x;
    //Calculate the search area.
    size_t startLength=searchSize*threadId;
    //Check area border.
    if(startLength>lastPos)
    {
        //No need to search
        return;
    }
    register uchar *startPos=data+startLength, *endPos,
                   *cache=headerCache+(threadIdx.x<<4);
    if(threadId<threadCount-1)
    {
        endPos=startPos+searchSize;
    }
    else
    {
        endPos=data+lastPos+2;
    }
    //Loop for the entire data parts.
    while(startPos < endPos)
    {
        //Check for the sync code.
        if(startPos[0]==0xFF && (startPos[1] & 0xFE)==0xF8 &&
            (startPos[3] & 0x01)==0x00)
        {
            //CudaBitStream bitStream;
            //grint32 *channelPcm[2];
            //Read the data to shared memory cache.
            cache[1]=cudaLdg(startPos[1]);
            cache[2]=cudaLdg(startPos[2]);
            cache[3]=cudaLdg(startPos[3]);
            //Pass the initial check, parse the header data.
            register gruint32 sampleRate=cudaSampleRate[cache[2] & 0x0F];
            register gruint32 blockSize=cudaBlockSize[(cache[2] & 0xF0)>>4];
            register gruint8 channel=cudaChannel[(cache[3] & 0xF0)>>4], 
                             bitsPerSample=cudaBps[(cache[3] & 0x0E)>>1];
            if(blockSize && sampleRate && channel==streamChannels
                && (bitsPerSample==0 || bitsPerSample==streamBps))
            {
                //No invalid value found, calculate the CRC-8 to check whether it is frame or not.
                //Read UTF-8 length.
                register gruint8 utfByte=(cache[4]=cudaLdg(startPos[4]));
                register gruint32 headerSize= 4 + (utfByte < 0x80) + (utfByte > 0xBF) + (utfByte > 0xBF) + (utfByte > 0xDF) + 
                                         (utfByte > 0xEF) + (utfByte > 0xF7) + (utfByte > 0xFB) + (utfByte == 0xFE),
                                  frameIndex;
                //Copy the data to the cache.
                if(headerSize==5)
                {
                    //Simply save the utf byte as the frame index.
                    frameIndex=utfByte;
                }
                else
                {
                    //Need to fetch the data.
                    frameIndex=utfByte & ((1<<(11-headerSize))-1);
                    utfByte=5;
                    while(utfByte<headerSize)
                    {
                        frameIndex=(frameIndex<<6)|((cache[utfByte]=cudaLdg(startPos[utfByte]))&0x3F);
                        ++utfByte;
                    }
                }
                //Check frame index.
                if(frameIndex<frameCount)
                {
                    //Check the block size skip.
                    if(blockSize==8)
                    {
                        // 8-bit
                        blockSize=(gruint32)(cache[headerSize]=cudaLdg(startPos[headerSize]))+1;
                        ++headerSize;
                    }
                    else if(blockSize==16)
                    {
                        // 16-bit BE
                        cache[headerSize]=cudaLdg(startPos[headerSize]);
                        cache[headerSize+1]=cudaLdg(startPos[headerSize+1]);
                        blockSize=(cache[headerSize]<<8)|cache[headerSize+1];
                        ++blockSize;
                        headerSize+=2;
                    }
                    //Check for sample rate fetch mark value.
                    if(sampleRate==8001)
                    {
                        //Fetch 8-bit, unit kHz.
                        cache[headerSize]=cudaLdg(startPos[headerSize]);
                        ++headerSize;
                    }
                    else if(sampleRate==16 || sampleRate==160)
                    {
                        //Fetch 16-bit, unit Hz.
                        cache[headerSize]=cudaLdg(startPos[headerSize]);
                        cache[headerSize+1]=cudaLdg(startPos[headerSize+1]);
                        headerSize+=2;
                    }
                    //Check the sample rate.
                    if(sampleRate==streamSampleRate)
                    {
                        //Calculate the CRC-8 for last checking.
                        register gruint8 crc8=0xF3, // Result of CRC-8 0xFF.
                                         crcPos=1;
                        while(crcPos<headerSize)
                        {
                            crc8=cudaFlacCrc8Table[crc8^cache[crcPos++]];
                        }
                        if(crc8==cudaRLdg(startPos+headerSize))
                        {
                            //Frame approval.
                            //Check bits per sample.
                            if(bitsPerSample==0)
                            {
                                //Save the bps.
                                bitsPerSample=streamBps;
                            }
                            //Calculate the channel assignment.
                            decodeData[frameIndex].blockSize=blockSize;
                            decodeData[frameIndex].channel=channel;
                            decodeData[frameIndex].channelAssignment=cudaChannelAss[(cache[3] & 0xF0)>>4];
                            decodeData[frameIndex].bitsPerSample=bitsPerSample;
                            //Save the block size, which is the sample size.
                            frameSizes[frameIndex]=blockSize;
                            //Skip the data.
                            startPos+=(headerSize+1);
                            //Create the bitstream for decoding.
                            decodeData[frameIndex].bitStream.data=startPos;
                            decodeData[frameIndex].bitStream.cache=cudaRLdg(startPos);
                            decodeData[frameIndex].bitStream.bitpos=0;
                            //Skip CRC-16 at end, sub frame start at the middle.
                            //Continue to next checking.
                            startPos+=2+channel;
                            continue;
                        }
                    }
                }
                startPos+=3;
            }
        }
        //Move to next byte.
        ++startPos;
    }
}

#endif // FLAC_CUDA_FRAME
