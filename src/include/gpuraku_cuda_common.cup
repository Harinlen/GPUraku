/*
 * This file is part of GPUraku.
 * 
 * GPUraku is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * GPUraku is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GPUraku.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef GPURAKU_CUDA_COMMON
#define GPURAKU_CUDA_COMMON

/*
 * Common CUDA function that would be used in all kinds of CUDA cu
 * files.
 */

/*
 * Usage: gr_cuda_malloc(part, sizeof(int)*length);
 * Allocate memory on CUDA devices
 * Returns: 0       - Failed to allocate the memory on CUDA device.
 *          1       - Successfully allocate memory on the CUDA device to the 
 *                    pointer.
 */
#define gr_cuda_malloc(target, size) \
    (cudaMalloc(&(target), size) == cudaSuccess)

/*
 * Usage: gr_cuda_memcpy_to_device(device_target, host_target, sizeof(int)*len);
 * Copy the data from host to CUDA device.
 * Returns: 0       - Failed to copy the target from host to device.
 *          1       - Successfully copy the specific length content to device.
 */
#define gr_cuda_memcpy_to_device(dest, src, size) \
    (cudaMemcpy(dest, src, size, cudaMemcpyHostToDevice) == cudaSuccess)

/*
 * Usage: gr_cuda_memcpy_to_host(host_target, device_target, sizeof(int)*len);
 * Copy the data from CUDA device to host.
 * Returns: 0       - Failed to copy the target from device to host.
 *          1       - Successfully copy the specific length content to host.
 */
#define gr_cuda_memcpy_to_host(dest, src, size) \
    (cudaMemcpy(dest, src, size, cudaMemcpyDeviceToHost) == cudaSuccess)

/*
 * Usage: gr_cuda_free(device_target);
 * Free a target on the CUDA device.
 * Returns: 0       - Failed to copy the target from device to host.
 *          1       - Successfully copy the specific length content to host.
 */
#define gr_cuda_free(target) \
    cudaFree(&(target)); (*target)=NULL

#endif // GPURAKU_CUDA_COMMON
